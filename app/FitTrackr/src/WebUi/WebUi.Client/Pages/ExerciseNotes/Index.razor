@page "/exercisenotes"
@attribute [Authorize]
@rendermode InteractiveWebAssembly
@using FitTrackr.WebUi.Client.Handlers.Interfaces
@using FitTrackr.WebUi.Shared.ExerciseNotes
@using MudBlazor.Services
@inject IExerciseNoteHandler ExerciseNoteHandler
@inject IDialogService DialogService

<PageTitle>Exercise Notes</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h4">Exercise Notes</MudText>

    @if (Initialized)
    {
        <MudTable Items="Model!.ExerciceNotes" Striped="true" Hover="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="@(() => OpenEditDialog(context))">Edit</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText Typo="Typo.body1">Loading...</MudText>
    }

    <MudFab Icon="add" Color="Color.Primary" Class="fab-button" OnClick="OpenAddDialog" />
</MudContainer>

<style>
    .fab-button {
        position: fixed;
        bottom: 16px;
        right: 16px;
        z-index: 1050;
    }
</style>

@code {
    private ExerciseNotesVm? Model { get; set; }
    private bool Initialized { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Model = await ExerciseNoteHandler.GetExerciseNotesAsync();
        Initialized = true;
    }

    private async Task OpenAddDialog()
    {
        Console.WriteLine("Opening Add Dialog");
        var parameters = new DialogParameters
        {
            { nameof(AddEditExerciseNoteDialog.ExerciseNote), new ExerciseNoteDto() },
            { nameof(AddEditExerciseNoteDialog.State), Model }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AddEditExerciseNoteDialog>("Add Exercise Note", parameters, options);
        var result = await dialog.Result;
        Console.WriteLine("Dialog result: " + result.Cancelled);

        if (!result.Cancelled)
        {
            Model = await ExerciseNoteHandler.GetExerciseNotesAsync();
        }
    }

    private async Task OpenEditDialog(ExerciseNoteDto exerciseNote)
    {
        Console.WriteLine("Opening Edit Dialog");
        var parameters = new DialogParameters
        {
            { nameof(AddEditExerciseNoteDialog.ExerciseNote), exerciseNote },
            { nameof(AddEditExerciseNoteDialog.State), Model }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AddEditExerciseNoteDialog>("Edit Exercise Note", parameters, options);
        var result = await dialog.Result;
        Console.WriteLine("Dialog result: " + result.Cancelled);

        if (!result.Cancelled)
        {
            Model = await ExerciseNoteHandler.GetExerciseNotesAsync();
        }
    }
}
